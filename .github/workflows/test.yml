name: Test

on:
  push:
    branches:
      - master
  pull_request:
  #schedule:
  #  - cron: '0 12 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - minimal
          - stable
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust
        if: matrix.toolchain != 'minimal'
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: Determine minimal supported Rust
        if: matrix.toolchain == 'minimal'
        id: minimal-version
        run: |
          rust_version="$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].rust_version')"
          echo "msrv=$rust_version" >> "$GITHUB_OUTPUT"

      - name: Install minimal supported Rust
        if: matrix.toolchain == 'minimal'
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.minimal-version.outputs.msrv }}

      - name: Activate cache
        if: "!startsWith(github.head_ref, 'dependabot/')"
        uses: Swatinem/rust-cache@v2

      - name: Build crate
        run: cargo build --workspace --all-targets --all-features --verbose

      - name: Test crate
        run: cargo test --workspace --all-features --verbose

  coverage:
    # This is separate from the main tests because cargo-llvm-cov doesn't run
    # doctests.
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: llvm-tools

      - name: Activate cache
        if: "!startsWith(github.head_ref, 'dependabot/')"
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Test with coverage
        run: cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: Activate cache
        if: "!startsWith(github.head_ref, 'dependabot/')"
        uses: Swatinem/rust-cache@v2

      - name: Check code
        run: cargo clippy --all-features --all-targets -- -Dwarnings

      - name: Check formatting
        run: cargo fmt --check

#  docs:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out repository
#        uses: actions/checkout@v4
#
#      - name: Install nightly Rust
#        uses: dtolnay/rust-toolchain@master
#        with:
#          toolchain: nightly
#
#      - name: Activate cache
#        if: "!startsWith(github.head_ref, 'dependabot/')"
#        uses: Swatinem/rust-cache@v2
#
#      - name: Check docs
#        run: cargo doc -p adventutil --no-deps --all-features
#        env:
#          RUSTDOCFLAGS: -Dwarnings

  regression:
    runs-on: ubuntu-latest
    steps:
      - name: Install git-crypt
        run: sudo apt-get update && sudo apt-get install -y git-crypt

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Decrypt
        run: |
          printf '%s\n' "$GIT_CRYPT_KEY" | base64 -d > key.dat
          git crypt unlock key.dat
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Activate cache
        if: "!startsWith(github.head_ref, 'dependabot/')"
        uses: Swatinem/rust-cache@v2

      - name: Build binaries
        run: cargo build --workspace --bins --release --verbose

      - name: Run regression tests
        run: cargo run -r -p regresstest

# vim:set et sts=2:
